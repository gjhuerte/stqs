import java.awt.*;import java.awt.event.*;import javax.swing.*;import java.io.BufferedReader;import java.io.FileReader;import java.io.BufferedWriter;import java.io.FileWriter;import java.io.File;import javax.swing.border.*;import javax.swing.filechooser.FileFilter;import javax.swing.JFileChooser;public class AnswerCreator implements ActionListener,MouseListener,ItemListener,KeyListener{	int totalscore = 0;	int _points = 0;	int TO_CHECK = 0;	int TO_CHECK1 = 0;	int TO_CHECK2 = 0;	int OPENED_FILE = 0;	write w = new write();	String FileContent[] = {"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""};		String TFileContent[] = {};			String SFileContent[] = {};		protected String arrayStringText[] = {};		int idItemNo = 0;	int mcItemNo = 0;	int enItemNo = 0;	int esItemNo = 0;	int total = 0;	int fileWritten = 0;	int fileEnd = 0;	String filename = "";	public String END_OF_ITEMS = "- - END OF ITEMS - -";	public String NEWLINE = "\n";		String display = "";		JFrame f = new JFrame("Answer Creator/Checker");	Container contentpane;		JMenuBar mb = new JMenuBar();	JMenu menu = new JMenu("Menu");		JMenuItem openMenuItem = new JMenuItem("Open a Questionnaire");	JMenuItem exitMenuItem = new JMenuItem("Quit Creating Answer Sheet");		JPanel panel = new JPanel(new GridLayout(1,2));	JPanel rightPanel = new JPanel(new BorderLayout());	JPanel rightBttmPanel = new JPanel(new CardLayout());	JPanel leftPanel = new JPanel(new BorderLayout(1,1));		JPanel viewContainer = new JPanel(new FlowLayout());	String son = "No questionnaire opened";JScrollPane scrollPane;	JLabel s = new JLabel(son);	JTextArea area = new JTextArea(40,40);			JPanel eventPanel = new JPanel(new BorderLayout());	ButtonGroup eventGroup = new ButtonGroup();	JRadioButton checkRB = new JRadioButton("Check Students Answer");	JRadioButton createRB = new JRadioButton("Create an answer sheet");		JPanel answerSheetPanel = new JPanel(new BorderLayout(5,3));		JPanel itemPanel = new JPanel(new GridLayout(4,2,5,3));	JComboBox cb = new JComboBox(new String[]{"IDENTIFICATION","MULTIPLE CHOICE","ENUMERATION","ESSAY WRITING"});	JPanel viewAndCommentPanel = new JPanel(new GridLayout(1,2));	JButton viewAns = new JButton("<< VIEW >>");	JButton commentAdd = new JButton("Add Comment");	JLabel itemNo = new JLabel("1");	JTextField itemField = new JTextField();	JButton Prev = new JButton("<< Previous Item");	JButton Next = new JButton("Next >>");	JButton submitBttn = new JButton("Submit");	JTextField nameField = new JTextField();		JTextArea ansArea = new JTextArea(30,43);	JScrollPane ansBar = new JScrollPane(ansArea);		JPanel ansAreaBttn = new JPanel(new GridLayout(1,2,5,7));	JButton clearBttn = new JButton("Clear Field");	JButton saveBttn = new JButton("Create an Answer Sheet");			JFrame commentFrame = new JFrame("Comments");	JMenuBar commentBar = new JMenuBar();	JMenu commentMenu = new JMenu("Menu");	JMenuItem commentNew = new JMenuItem("New");	JMenuItem commentExit = new JMenuItem("Exit");		JTextArea COMMENT = new JTextArea(50,50);	JScrollPane cpane = new JScrollPane(COMMENT);		JPanel checkAnswer = new JPanel(new BorderLayout());		JPanel studAnswerPanel = new JPanel(new GridLayout(1,2,1,5));	JTextArea saArea = new JTextArea(15,25);		JPanel itemsTotalPanel = new JPanel(new BorderLayout());	JMenuBar openBttnBar = new JMenuBar();	JMenu openBttn = new JMenu("OPEN");	JMenuItem openStudAnsSheet = new JMenuItem("Open Student Answer sheet");	JMenuItem openAnsSheet = new JMenuItem("Open Your Answer sheet");	JButton checkItem = new JButton("CHECK");	JButton recordItem = new JButton("RECORD");		JPanel itemsPanel = new JPanel(new BorderLayout());	JPanel bttnPanel = new JPanel(new GridLayout(1,3));	JPanel items1Panel = new JPanel(new GridLayout(6,1));	JPanel items2Panel = new JPanel(new GridLayout(6,1));	JPanel items3Panel = new JPanel(new GridLayout(6,1));		JLabel idItemLbl = new JLabel("ID: ");	JLabel idItemCorrect = new JLabel("0");	JLabel idItemPoints = new JLabel("0");			JLabel mcItemLbl = new JLabel("MC:");	JLabel mcItemCorrect = new JLabel("0");	JLabel mcItemPoints = new JLabel("1");			JLabel enItemLbl = new JLabel("EN:");	JLabel enItemCorrect = new JLabel("0");	JLabel enItemPoints = new JLabel("0");			JLabel esItemLbl = new JLabel("EW:");	JLabel esItemCorrect = new JLabel("0");	JLabel esItemPoints = new JLabel("0");		JLabel changeItemPoints = new JLabel("Points: ");	JComboBox itemsCB = new JComboBox(new String[]{"IDENTIFICATION","MULTIPLE CHOICE","ENUMERATION","ESSAY WRITING"});	JTextField points = new JTextField("1",3);		JLabel studNameLbl = new JLabel("Name:");	JLabel studName = new JLabel("NONE");	JLabel scoreLbl = new JLabel("0/0");		JPanel ansSheetPanel = new JPanel();	JTextArea asArea = new JTextArea(11,41);	JScrollPane ansSheet = new JScrollPane(asArea);		JPanel statusPanel = new JPanel();	JTextArea statusArea = new JTextArea(9,41);	JScrollPane statusSheet = new JScrollPane(statusArea);		int idNo = 0;	int mcNo = 0;	int enNo = 0;	int esNo = 0;		public void launchFrame()	{		f.setJMenuBar(mb);				mb.add(menu);		menu.add(openMenuItem);		menu.add(exitMenuItem);			openMenuItem.addActionListener(this);			exitMenuItem.addActionListener(this);						contentpane = f.getContentPane();				contentpane.add(panel);						viewContainer.setBorder(BorderFactory.createTitledBorder(null, "Questionnaire View",TitledBorder.TOP,TitledBorder.CENTER));		area.setBorder(BorderFactory.createEtchedBorder());		scrollPane = new JScrollPane(area);		viewContainer.add(s,BorderLayout.NORTH);		viewContainer.add(scrollPane,BorderLayout.CENTER);		area.setEditable(false);		leftPanel.add(viewContainer,BorderLayout.CENTER);		panel.add(leftPanel);				// - - Questionnaire View 				eventPanel.setBorder(BorderFactory.createTitledBorder(null, "Option",TitledBorder.TOP,TitledBorder.CENTER));		eventPanel.add(createRB,BorderLayout.WEST);		eventPanel.add(checkRB,BorderLayout.EAST);checkRB.addItemListener(this);		eventGroup.add(createRB);createRB.addItemListener(this);		eventGroup.add(checkRB);checkRB.setSelected(true);	 	rightPanel.add(eventPanel,BorderLayout.NORTH);				//- - choose between create or correct				itemPanel.add(cb);cb.addItemListener(this);		itemPanel.add(nameField);nameField.setBorder(BorderFactory.createTitledBorder(null, " Name:",TitledBorder.LEFT,TitledBorder.CENTER));		itemPanel.add(itemNo);itemNo.setBorder(BorderFactory.createTitledBorder(null, "Item No:",TitledBorder.LEFT,TitledBorder.CENTER));		itemPanel.add(itemField);itemField.setBorder(BorderFactory.createTitledBorder(null, "Answer:",TitledBorder.LEFT,TitledBorder.CENTER));itemField.addKeyListener(this);		itemPanel.add(Prev);Prev.addActionListener(this);		itemPanel.add(Next);Next.addActionListener(this);		itemPanel.add(submitBttn);submitBttn.addActionListener(this);				viewAndCommentPanel.add(viewAns);viewAns.addActionListener(this);		viewAndCommentPanel.add(commentAdd);commentAdd.addActionListener(this);				itemPanel.add(viewAndCommentPanel);				ansArea.setBorder(BorderFactory.createTitledBorder(null, "Answer View",TitledBorder.TOP,TitledBorder.CENTER));				ansAreaBttn.add(clearBttn);clearBttn.addActionListener(this);		ansAreaBttn.add(saveBttn);saveBttn.addActionListener(this);				answerSheetPanel.setBorder(BorderFactory.createTitledBorder(null, "Answer Sheet",TitledBorder.TOP,TitledBorder.CENTER));		answerSheetPanel.add(itemPanel,BorderLayout.NORTH);		answerSheetPanel.add(ansBar	,BorderLayout.WEST);		answerSheetPanel.add(ansAreaBttn,BorderLayout.SOUTH);				answerSheetPanel.setVisible(false);						Prev.setEnabled(false);		Next.setEnabled(false);		submitBttn.setEnabled(false);		saveBttn.setEnabled(false);				// - end of creating answer sheet - -				itemsPanel.setBorder(BorderFactory.createTitledBorder(null, "Items",TitledBorder.TOP,TitledBorder.CENTER));		itemsPanel.add(items1Panel,BorderLayout.WEST);items1Panel.setBorder(BorderFactory.createEtchedBorder());		itemsPanel.add(items2Panel,BorderLayout.CENTER);items2Panel.setBorder(BorderFactory.createEtchedBorder());		itemsPanel.add(items3Panel,BorderLayout.EAST);items3Panel.setBorder(BorderFactory.createEtchedBorder());				bttnPanel.add(openBttnBar);		openBttnBar.add(openBttn);		openBttn.add(openStudAnsSheet);openBttn.add(openAnsSheet);		openStudAnsSheet.addActionListener(this);		openAnsSheet.addActionListener(this);		bttnPanel.add(checkItem);checkItem.addActionListener(this);checkItem.setEnabled(false);		bttnPanel.add(recordItem);recordItem.addActionListener(this);recordItem.setToolTipText("Record score to your class record");recordItem.setEnabled(false);				items1Panel.add(studNameLbl);		items2Panel.add(studName);		items3Panel.add(scoreLbl);				items1Panel.add(idItemLbl);		items2Panel.add(idItemCorrect);		items3Panel.add(idItemPoints);						items1Panel.add(mcItemLbl);		items2Panel.add(mcItemCorrect);		items3Panel.add(mcItemPoints);						items1Panel.add(enItemLbl);		items2Panel.add(enItemCorrect);		items3Panel.add(enItemPoints);						items1Panel.add(esItemLbl);		items2Panel.add(esItemCorrect);		items3Panel.add(esItemPoints);				items1Panel.add(changeItemPoints);		items2Panel.add(itemsCB);		items3Panel.add(points);points.addKeyListener(this);				itemsTotalPanel.add(itemsPanel,BorderLayout.CENTER);		itemsTotalPanel.add(bttnPanel,BorderLayout.NORTH);				saArea.setBorder(BorderFactory.createTitledBorder(null, "Answer Sheet ",TitledBorder.LEFT,TitledBorder.CENTER));		JScrollPane spArea = new JScrollPane(saArea);		studAnswerPanel.add(spArea);		studAnswerPanel.add(itemsTotalPanel);				ansSheetPanel.add(ansSheet);ansSheetPanel.setBorder(BorderFactory.createTitledBorder(null, "Students Answer Sheet ",TitledBorder.LEFT,TitledBorder.CENTER));		points.setToolTipText("By default, each item consist of 1 point");				statusPanel.setBorder(BorderFactory.createTitledBorder(null, "Status",TitledBorder.LEFT,TitledBorder.CENTER));		statusPanel.add(statusSheet);statusSheet.setBorder(BorderFactory.createEtchedBorder());				checkAnswer.setBorder(BorderFactory.createTitledBorder(null, "Checking of Testpaper",TitledBorder.TOP,TitledBorder.CENTER));			checkAnswer.add(studAnswerPanel,BorderLayout.NORTH);		checkAnswer.add(ansSheetPanel,BorderLayout.CENTER);		checkAnswer.add(statusPanel,BorderLayout.SOUTH);				saArea.setEditable(false);		asArea.setEditable(false);		statusArea.setEditable(false);				// - -end of checker layout - -				rightBttmPanel.add(checkAnswer);		rightBttmPanel.add(answerSheetPanel);				rightPanel.add(rightBttmPanel,BorderLayout.CENTER);				panel.add(rightPanel);		f.setSize(1000,1000);		f.setIconImage(new ImageIcon("logo.png").getImage());		f.setSize(1000,1000);		f.setVisible(true);		f.setResizable(false);		f.setLocationRelativeTo(null);	}		public void mousePressed(MouseEvent e){}	public void mouseClicked(MouseEvent e){}	public void mouseReleased(MouseEvent e){}	public void mouseEntered(MouseEvent e)	{		openMenuItem.setText("Change");	}	public void mouseExited(MouseEvent e)	{		openMenuItem.setText("Opened Questionnaire"+filename);	}			public void itemStateChanged(ItemEvent e)	{		if(e.getSource() == checkRB )		{			if( checkRB.isSelected())			{				resetAll();				checkAnswer.setVisible(true);				answerSheetPanel.setVisible(false);				viewAns.setText("<< View >>");			}		}				if( e.getSource() == createRB )		{			resetAll();			if(createRB.isSelected())			{				checkAnswer.setVisible(false);				answerSheetPanel.setVisible(true);			}		}				if(e.getSource() == cb)		{			itemNo.setText("1");			Next.setEnabled(true);		}			}		public void actionPerformed(ActionEvent e)	{		if( e.getSource() == openMenuItem )		{			if(OPENED_FILE == 1)resetAll();			openMethod();			if( createRB.isSelected() == true )			{				Prev.setEnabled(true);				Next.setEnabled(true);				submitBttn.setEnabled(true);				saveBttn.setEnabled(true);			}			else			{				Prev.setEnabled(false);				Next.setEnabled(false);				submitBttn.setEnabled(false);				saveBttn.setEnabled(false);			}					}				if( e.getSource() == exitMenuItem )		{			f.dispose();		}				if( e.getSource() == Next )		{			NextMethod();		}				if( e.getSource() == Prev )		{			int number = Integer.parseInt(itemNo.getText());			if(number == 1)			{				JOptionPane.showMessageDialog(null,"You're already at the starting item!");				Prev.setEnabled(false);			}			else			{				number--;				itemNo.setText(""+number);			}			Next.setEnabled(true);		}				if( e.getSource() == viewAns )		{			viewAns.setText("<< Update View >>");			answerDisplay();			ansArea.setText(display);			display = "";		}				if( e.getSource() == clearBttn )		{			ansArea.setText("");		}				if( e.getSource() == submitBttn )		{			submitMethod();		}				if( e.getSource() == saveBttn )		{			if(nameField.getText().equals(""))			{				JOptionPane.showMessageDialog(null,"Dont forget to write your name!");			}			else				saveToFile();		}				if( e.getSource() == commentAdd )		{			commentMethod();			commentFrame.setVisible(true);		}				if(e.getSource() == commentNew)		{			COMMENT.setText("");		}				if(e.getSource() == commentExit)				{			commentFrame.setVisible(false);		}		if(e.getSource() == checkItem)		{			checkAns();			recordItem.setEnabled(true);		}				if(e.getSource() == recordItem)		{			RecordGUI r = new RecordGUI();			r.launchFrame(studName.getText(),totalscore);		}				if(e.getSource() == openAnsSheet)		{			openAnswerSheet(0);			if(TO_CHECK == 2)checkItem.setEnabled(true);		}				if(e.getSource() == openStudAnsSheet)		{			openAnswerSheet(1);			if(TO_CHECK == 2)checkItem.setEnabled(true);		}		ansBar.getViewport().setViewPosition(new Point(0,0));	}		public void keyReleased(KeyEvent e){}	public void keyTyped(KeyEvent e){}	public void keyPressed(KeyEvent e)	{		if(e.getSource() == points)		{			if((e.getKeyCode()==10)||(e.getKeyCode()==8));			else			if((e.getKeyCode()>36)&&(e.getKeyCode()<41));			else			if( (e.getKeyCode()<96)||(e.getKeyCode()>105))			{				JOptionPane.showMessageDialog(null,"Numbers only!","Error Status",JOptionPane.ERROR_MESSAGE);				points.setText("");			}		}				if((e.getSource() == itemField)&&(e.getKeyCode() == 10))		{			submitMethod();			ansBar.getViewport().setViewPosition(new Point(0,0));		}			}		public void openMethod()	{		openFile();		readFile();		setDisplay();		openMenuItem.addMouseListener(this);		OPENED_FILE = 1;	}		public void openFile()	{		File dir = new File(System.getProperty("user.home")+ "\\Documents\\STQS\\Questionnaire_Created");		if(!dir.exists())		{			dir.mkdirs();		}					JFileChooser fileChooser = new JFileChooser();			fileChooser.setCurrentDirectory(dir);			FileFilter filter = new ExtensionFileFilter("Test Paper","tpr");			fileChooser.setFileFilter(filter);			fileChooser.setAcceptAllFileFilterUsed(false);			int result = fileChooser.showOpenDialog(null);						if (result == JFileChooser.APPROVE_OPTION) 			{				File selectedFile = fileChooser.getSelectedFile();				filename = selectedFile.getAbsolutePath();				openMenuItem.setText("Opened:"+filename);				viewAns.setText("<< View >>");				s.setText(filename);				Next.setEnabled(true);				submitBttn.setEnabled(true);				createRB.setEnabled(true);				saveBttn.setEnabled(true);			}						if(result == JFileChooser.CANCEL_OPTION)			{				JOptionPane.showMessageDialog(null,"No file Chosen!");			}	}		public void readFile()	{		int ctr = 0;		String string = "";		try		{			BufferedReader br = new BufferedReader(new FileReader(new File(filename)));			string = br.readLine();			string = br.readLine();			while((string = br.readLine())!= null)  //if string == null , increment wont occur.			{				FileContent[ctr] = string;				ctr++;			}			br.close();		}		catch(Exception e){}			}		public void setDisplay()  //sets the display	{		display = "";		int no = 1;		int ctr = 0;				if(FileContent[ctr].equals("I. IDENTIFICATION"))		{			idNo = ctr;			arrayStringText[total] = FileContent[ctr];			display += FileContent[ctr] + NEWLINE;ctr++;total++;			display += FileContent[ctr] + NEWLINE;ctr++;			while(!FileContent[ctr].equals(END_OF_ITEMS))			{				if(FileContent[ctr].equals(""))				{					display += no +"."+ "_________";;					display += NEWLINE;				}				else				if(FileContent[ctr].equals(END_OF_ITEMS))				{					display += FileContent[ctr];					display += NEWLINE;					break;				}				else				{					display += FileContent[ctr];					display += NEWLINE;					display += no +"."+ "_________";					display += NEWLINE;				}				no++;				ctr++;			}			ctr++;			total += no;			idItemNo = no;			no = 1;								display += NEWLINE;					display += NEWLINE;		}		else		{			cb.removeItemAt(0);			idItemNo-=1;		}							if(FileContent[ctr].equals("II. MULTIPLE CHOICE"))		{			mcNo = ctr;			int nmbr = 0;						arrayStringText[total+1] = FileContent[ctr];			display += FileContent[ctr] + NEWLINE;ctr++;total++;			display += FileContent[ctr] + NEWLINE;ctr++;						while(!FileContent[ctr].equals(END_OF_ITEMS))			{					if(FileContent[ctr].equals(END_OF_ITEMS))				{					display += FileContent[ctr];					display += NEWLINE;					break;				}				else				{					display += no +"."+ FileContent[ctr] + "______________";					display += NEWLINE;					ctr++;					nmbr = w.extractNumber(FileContent[ctr]);					String temp[] = FileContent[ctr].split(",");					char choice_letter = 'a';					for( int y = 1 ; y <= nmbr ; y++ )					{						display +=  choice_letter + "." + temp[y];						display += NEWLINE;						choice_letter++;					}					no++;				}				ctr++;			}			ctr++;			total += no;			mcItemNo = no;			no = 1;				display += NEWLINE;			display += NEWLINE;		}		else		{			mcItemNo-=1;			cb.removeItemAt(1);		}				if(FileContent[ctr].equals("III. ENUMERATION"))		{			enNo = ctr;			arrayStringText[total+1] = FileContent[ctr];			display += FileContent[ctr] + NEWLINE;ctr++;total++;			display += FileContent[ctr] + NEWLINE;ctr++;						while(!FileContent[ctr].equals(END_OF_ITEMS))			{				if(FileContent[ctr].equals(END_OF_ITEMS))				{					display += FileContent[ctr];					display += NEWLINE;					break;				}				else				{					if(FileContent[ctr].equals(""))					{						display += no +".";						display += NEWLINE;					}					else					{						display += FileContent[ctr];						display += NEWLINE;						display += no +".";						display += NEWLINE;					}					no++;				}				ctr++;							}			ctr++;			total += no;			enItemNo = no;			no = 1;					display += NEWLINE;			display += NEWLINE;		}		else		{			cb.removeItemAt(2);			enItemNo-=1;		}					if(FileContent[ctr].equals("IV. ESSAY WRITING"))		{			esNo = ctr;			arrayStringText[total+1] = FileContent[ctr];			display += FileContent[ctr] + NEWLINE;ctr++;total++;			display += FileContent[ctr] + NEWLINE;ctr++;						while(!FileContent[ctr].equals(END_OF_ITEMS))			{				if(FileContent[ctr].equals(END_OF_ITEMS))				{					display += FileContent[ctr];					display += NEWLINE;					break;				}				else				{					if(FileContent[ctr].equals(""))					{						FileContent[ctr] = "-";						display += FileContent[ctr];						display += NEWLINE;					}					else					{						display += no +"."+ FileContent[ctr] + "______________";						display += NEWLINE;					}					no++;				}				ctr++;			}						total += no;			esItemNo = no;		}		else		{			cb.removeItemAt(3);			esItemNo-=1;		}			area.setText(display);			scrollPane.getViewport().setViewPosition(new Point(0,0));	}	public void answerDisplay()	{		ansArea.setText("");		display = "";		int no = 1;		int ctr = 0;		if(FileContent[idNo].equals("I. IDENTIFICATION"))		{			display += FileContent[idNo]+NEWLINE;ctr++;			while(no<idItemNo)			{				if(arrayStringText[ctr].equals(""))				{					display += no +"."+ "_________";;					display += NEWLINE;				}				else				{					display += no +"."+arrayStringText[ctr];					display += NEWLINE;				}				no++;				ctr++;			}			no = 1;			display += arrayStringText[ctr] + NEWLINE;ctr++;		}				if(FileContent[mcNo].equals("II. MULTIPLE CHOICE"))		{			display += FileContent[mcNo]+NEWLINE;			ctr++;ctr++;			while(no<mcItemNo)			{				if(arrayStringText[ctr].equals(""))				{					display += no +"."+ "_________";;					display += NEWLINE;				}				else				{					display += no +"."+arrayStringText[ctr];					display += NEWLINE;				}				no++;				ctr++;			}			no = 1;			display += arrayStringText[ctr] + NEWLINE;ctr++;		}				if(FileContent[enNo].equals("III. ENUMERATION"))				{			display += FileContent[enNo]+NEWLINE;			ctr++;			while(no<enItemNo)			{				if(arrayStringText[ctr].equals(""))				{					display += no +"."+ "_________";;					display += NEWLINE;				}				else				{					display += no +"."+arrayStringText[ctr];					display += NEWLINE;				}				no++;				ctr++;			}			no = 1;			display += arrayStringText[ctr] + NEWLINE;ctr++;		}					if(FileContent[esNo].equals("IV. ESSAY WRITING"))		{			display += FileContent[esNo]+NEWLINE;			ctr++;			while(no<esItemNo)			{				if(arrayStringText[ctr].equals(""))				{					display += no +"."+ "_________";;					display += NEWLINE;				}				else				{					display += no +"."+arrayStringText[ctr];					display += NEWLINE;				}				no++;				ctr++;			}		}				ansArea.setText(display);	}			public void NextMethod()	{		int number = Integer.parseInt(itemNo.getText());		String typeOfExam = "";		typeOfExam += cb.getSelectedItem();		number++;		if(typeOfExam.equals("IDENTIFICATION"))		if(number == idItemNo)		{			JOptionPane.showMessageDialog(null,"You're already at the end of the specified number of items");			Next.setEnabled(false);		}		else			itemNo.setText(""+number);		if(typeOfExam.equals("MULTIPLE CHOICE"))		if(number == mcItemNo)		{			JOptionPane.showMessageDialog(null,"You're already at the end of the specified number of items");			Next.setEnabled(false);		}		else			itemNo.setText(""+number);			if(typeOfExam.equals("ENUMERATION"))		if(number == enItemNo)		{			JOptionPane.showMessageDialog(null,"You're already at the end of the specified number of items");			Next.setEnabled(false);		}		else			itemNo.setText(""+number);		if(typeOfExam.equals("ESSAY WRITING"))		if(number == esItemNo)		{			JOptionPane.showMessageDialog(null,"You're already at the end of the specified number of items");			Next.setEnabled(false);		}		else			itemNo.setText(""+number);			Prev.setEnabled(true);	}		public void submitMethod()	{		int number = Integer.parseInt(itemNo.getText());			String typeOfExam = "";			typeOfExam += cb.getSelectedItem();			if(typeOfExam.equals("IDENTIFICATION"))			{				if(number < idItemNo)				{					arrayStringText[number] = itemField.getText();					Prev.setEnabled(true);					number++;				}				else				{					JOptionPane.showMessageDialog(null,"Number not anymore in range of specified number of items");				}								if(number == 1)					Prev.setEnabled(false);				if(number == idItemNo)					Next.setEnabled(false);			}			if(typeOfExam.equals("MULTIPLE CHOICE"))			{				if(number < mcItemNo)				{					arrayStringText[number+idItemNo+2] = itemField.getText();					Prev.setEnabled(true);					number++;				}				else				{					JOptionPane.showMessageDialog(null,"Number not anymore in range of specified number of items");				}								if(number == 1)					Prev.setEnabled(false);				if(number == mcItemNo)					Next.setEnabled(false);			}			if(typeOfExam.equals("ENUMERATION"))			{				if(number < enItemNo)				{					arrayStringText[number+idItemNo+mcItemNo+3] = itemField.getText();					Prev.setEnabled(true);					number++;				}				else				{					JOptionPane.showMessageDialog(null,"Number not anymore in range of specified number of items");				}							if(number == 1)					Prev.setEnabled(false);				if(number == enItemNo)					Next.setEnabled(false);			}			if(typeOfExam.equals("ESSAY WRITING"))			{				if(number < esItemNo)				{					arrayStringText[number+idItemNo+mcItemNo+enItemNo+4] = itemField.getText();					Prev.setEnabled(true);					number++;				}				else				{					JOptionPane.showMessageDialog(null,"Number not anymore in range of specified number of items");				}								if(number == 1)					Prev.setEnabled(false);				if(number == esItemNo)					Next.setEnabled(false);			}			answerDisplay();			itemNo.setText(""+number);			itemField.setText("");	}		public void saveToFile()	{		int request_to_proceed = JOptionPane.YES_OPTION;		File dir = new File(System.getProperty("user.home")+ "\\Documents\\STQS\\Answer_Sheet");		if(!dir.exists())		{			dir.mkdirs();		}		if(COMMENT.getText().equals(""))		{			request_to_proceed  =  JOptionPane.showConfirmDialog(null,"It seems that you didn't add a comment, do you still want to continue?","Save Prompt",JOptionPane.YES_NO_OPTION);		}				if( request_to_proceed == JOptionPane.YES_OPTION)		{			String filename = "";			int fileWritten = 0;			JFileChooser file = new JFileChooser();			file.setCurrentDirectory(dir);			FileFilter filter = new ExtensionFileFilter("Answer sheet","ans");			file.setFileFilter(filter);			file.setAcceptAllFileFilterUsed(true);			file.setCurrentDirectory(dir);			int result = file.showSaveDialog(f);						if (result == JFileChooser.APPROVE_OPTION) 			{				File selectedFile = file.getSelectedFile();				 filename = selectedFile.getAbsolutePath() + ".ans";			}						try				{						BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(new File(filename)));				bufferedWriter.append("NAME:");						bufferedWriter.newLine();					bufferedWriter.append(nameField.getText());						bufferedWriter.newLine();					bufferedWriter.append("--END OF NAME--");						bufferedWriter.newLine();								for(fileWritten=0 	;fileWritten<total;fileWritten++)				{					bufferedWriter.append(arrayStringText[fileWritten]);						bufferedWriter.newLine();				}					bufferedWriter.append(END_OF_ITEMS);					bufferedWriter.newLine();					bufferedWriter.append("COMMENT:");					bufferedWriter.newLine();					bufferedWriter.append("/*");					bufferedWriter.newLine();					bufferedWriter.append(COMMENT.getText());					bufferedWriter.newLine();					bufferedWriter.append("*/");					bufferedWriter.newLine();					bufferedWriter.append(END_OF_ITEMS);										bufferedWriter.newLine();										bufferedWriter.flush();						bufferedWriter.close();			}					catch(Exception e)			{			 			}		}	}		public void resetAll()	{		display  = "";		ansArea.setText("");		area.setText("");		cb.removeAllItems();		cb.addItem("IDENTIFICATION");		cb.addItem("MULTIPLE CHOICE");		cb.addItem("ENUMERATION");		cb.addItem("ESSAY WRITING");		for(int x = 0;x<arrayStringText.length;x++)			arrayStringText[x] = "";		for(int x = 0;x<FileContent.length;x++)			FileContent[x] = "";		f.revalidate();		f.repaint();		idNo = 0;		mcNo = 0;		enNo = 0;		esNo = 0;		idItemNo = 0;		mcItemNo = 0;		enItemNo = 0;		esItemNo = 0;		total = 0;		fileWritten = 0;		fileEnd = 0;		s.setText("No questionnaire opened");		openMenuItem.setText("Open a Questionnaire");		openMenuItem.removeMouseListener(this);	}		public void commentMethod()	{		commentFrame.setJMenuBar(commentBar);		commentBar.add(commentMenu);		commentMenu.add(commentNew);commentNew.addActionListener(this);		commentMenu.add(commentExit);commentExit.addActionListener(this);		commentFrame.add(cpane);		commentFrame.setVisible(false);		commentFrame.setSize(300,300);		commentFrame.setResizable(false);	}		public void openAnswerSheet(int STUDENTS)	{		File dir = new File(System.getProperty("user.home")+ "\\Documents\\STQS\\Answer_Sheet");		if(!dir.exists())		{			dir.mkdirs();		}				if(STUDENTS == 1)		{					JFileChooser fileChooser = new JFileChooser();			fileChooser.setCurrentDirectory(dir);			FileFilter filter = new ExtensionFileFilter("Answer Sheet","stans");			fileChooser.setFileFilter(filter);			fileChooser.setAcceptAllFileFilterUsed(false);			int result = fileChooser.showOpenDialog(null);						File selectedFile = fileChooser.getSelectedFile();			filename = selectedFile.getAbsolutePath();						if (result == JFileChooser.APPROVE_OPTION) 			{					int ctr = 0;				String string = "";				try				{					BufferedReader br = new BufferedReader(new FileReader(new File(filename)));					while((string = br.readLine())!= null)  //if string == null , increment wont occur.					{						SFileContent[ctr] = string;						if(ctr==1)studName.setText(string);						FileContent[ctr] = string;						ctr++;					}				}				catch(Exception e){}				answerSheetDisplay(1);				TO_CHECK1 = 1;			}			if(result == JFileChooser.CANCEL_OPTION)			JOptionPane.showMessageDialog(null,"No file Chosen!","Status",JOptionPane.ERROR_MESSAGE);		}				if(STUDENTS == 0)		{					JFileChooser fileChooser = new JFileChooser();			fileChooser.setCurrentDirectory(dir);			FileFilter filter = new ExtensionFileFilter("Answer Sheet","ans");			fileChooser.setFileFilter(filter);			fileChooser.setAcceptAllFileFilterUsed(false);			int result = fileChooser.showOpenDialog(null);						File selectedFile = fileChooser.getSelectedFile();			filename = selectedFile.getAbsolutePath();									if (result == JFileChooser.APPROVE_OPTION) 			{					int ctr = 0;				String string = "";				try				{					BufferedReader br = new BufferedReader(new FileReader(new File(filename)));					while((string = br.readLine())!= null)  //if string == null , increment wont occur.					{						TFileContent[ctr] = string;						FileContent[ctr] = string;						ctr++;					}				}				catch(Exception e){}				answerSheetDisplay(0);				TO_CHECK2 = 1;			}							if(result == JFileChooser.CANCEL_OPTION)			JOptionPane.showMessageDialog(null,"No file Chosen!","Status",JOptionPane.ERROR_MESSAGE);		}						TO_CHECK = TO_CHECK1 + TO_CHECK2;	}		public void answerSheetDisplay(int FOR_DISPLAY)	{		ansArea.setText("");		display = "";		int no = 1;		int ctr = 3;		if(FileContent[ctr].equals("I. IDENTIFICATION"))		{			display += FileContent[ctr]+NEWLINE;ctr++;			while(!FileContent[ctr].equals("II. MULTIPLE CHOICE"))			{					if(FileContent[ctr].equals(""))				{					display += no +"."+ "_________";					display += NEWLINE;				}				else				{					display += no +"."+FileContent[ctr];					display += NEWLINE;				}				no++;				ctr++;				if(FileContent[ctr+1].equals("II. MULTIPLE CHOICE"))				ctr++;			}			no = 1;		}				if(FileContent[ctr].equals("II. MULTIPLE CHOICE"))		{			display += FileContent[ctr]+NEWLINE;			ctr++;			while(!FileContent[ctr].equals("III. ENUMERATION"))				{				if(arrayStringText[ctr].equals(""))				{					display += no +"."+ "_________";					display += NEWLINE;				}				else				{					display += no +"."+FileContent[ctr];					display += NEWLINE;				}				no++;				ctr++;			if(FileContent[ctr+1].equals("III. ENUMERATION"))				ctr++;			}			no = 1;		}				if(FileContent[ctr].equals("III. ENUMERATION"))				{			display += FileContent[ctr]+NEWLINE;			ctr++;			while(!FileContent[ctr].equals("IV. ESSAY WRITING"))			{				if(FileContent[ctr].equals(""))				{					display += no +"."+ "_________";					display += NEWLINE;				}				else				{					display += no +"."+FileContent[ctr];					display += NEWLINE;				}				no++;				ctr++;				if(FileContent[ctr+1].equals("IV. ESSAY WRITING"))				ctr++;			}			no = 1;		}					if(FileContent[ctr].equals("IV. ESSAY WRITING"))		{			display += FileContent[ctr]+NEWLINE;			ctr++;			while(!FileContent[ctr].equals("- - END OF ITEMS - -"))			{				if(FileContent[ctr].equals(""))				{					display += no +"."+ "_________";					display += NEWLINE;				}				else				{					display += no +"."+FileContent[ctr];					display += NEWLINE;				}				no++;				ctr++;				if(FileContent[ctr+1].equals("- - END OF ITEMS - -"))				ctr++;			}		}				if(FOR_DISPLAY == 1)			asArea.setText(display);		else 			saArea.setText(display);			display = "";			f.revalidate();			f.repaint();		System.out.println(display);	}		public void checkAns()	{		checkGUI c = new checkGUI();		int no = 1;		int ctr = 3;		_points = 0;		int total_points = 0;		display = "";		String ITEM_TYPE = "";		if(FileContent[ctr].equals("I. IDENTIFICATION"))		{			ITEM_TYPE = FileContent[ctr];			display += FileContent[ctr];ctr++;			display+="\n";			while(!FileContent[ctr].equals("II. MULTIPLE CHOICE"))			{				if(TFileContent[ctr].equals(SFileContent[ctr]))				{					display += no + ".CORRECT!";					if(itemsCB.getSelectedItem().equals("IDENTIFICATION"))					{						_points+=Integer.parseInt(points.getText());					}					else					_points++;				}				else				{					c.setWords(no+"."+SFileContent[ctr],ITEM_TYPE);					display += no + ".WRONG!";				}				no++;				ctr++;				display+="\n";				total_points+=Integer.parseInt(points.getText());			}			no = 1;			if(_points!=0)_points-=Integer.parseInt(points.getText());			total_points-=Integer.parseInt(points.getText());			idItemCorrect.setText(""+_points);			idItemPoints.setText(""+total_points);			_points = 0;			total_points = 0;		}				if(FileContent[ctr].equals("II. MULTIPLE CHOICE"))		{			ITEM_TYPE = FileContent[ctr];			display += FileContent[ctr];ctr++;			display+="\n";			while(!FileContent[ctr].equals("III. ENUMERATION"))				{				if(TFileContent[ctr].equals(SFileContent[ctr]))				{					display += no + ".CORRECT!";					if(itemsCB.getSelectedItem().equals("MULTIPLE CHOICE"))					{						_points+=Integer.parseInt(points.getText());					}					else						_points++;				}				else				{					c.setWords(no+"."+SFileContent[ctr],ITEM_TYPE);					display += no + ".WRONG!";				}				no++;				ctr++;				display+="\n";				total_points+=Integer.parseInt(points.getText());			}			no = 1;			if(_points!=0)_points-=Integer.parseInt(points.getText());			total_points-=Integer.parseInt(points.getText());			mcItemCorrect.setText(""+_points);			mcItemPoints.setText(""+total_points);			_points = 0;			total_points = 0;		}				if(FileContent[ctr].equals("III. ENUMERATION"))				{			ITEM_TYPE = FileContent[ctr];			display += FileContent[ctr];ctr++;			display+="\n";			while(!FileContent[ctr].equals("IV. ESSAY WRITING"))			{				if(TFileContent[ctr].equals(SFileContent[ctr]))				{					display += no + ".CORRECT!";					if(itemsCB.getSelectedItem().equals("ENUMERATION"))					{						_points+=Integer.parseInt(points.getText());					}					else						_points++;				}				else				{					c.setWords(no+"."+SFileContent[ctr],ITEM_TYPE);					display += no + ".WRONG!";				}				no++;				ctr++;				display+="\n";				total_points+=Integer.parseInt(points.getText());			}			no = 1;			if(_points!=0)_points-=Integer.parseInt(points.getText());			total_points-=Integer.parseInt(points.getText());			enItemCorrect.setText(""+_points);			enItemPoints.setText(""+total_points);			_points = 0;			total_points = 0;		}					if(FileContent[ctr].equals("IV. ESSAY WRITING"))		{			ITEM_TYPE = FileContent[ctr];			display += FileContent[ctr];ctr++;			display+="\n";			while(!FileContent[ctr].equals("- - END OF ITEMS - -"))			{				if(TFileContent[ctr].equals(SFileContent[ctr]))				{					display += no + ".CORRECT!";					if(itemsCB.getSelectedItem().equals("ESSAY WRITING"))					{						_points+=Integer.parseInt(points.getText());					}					else						_points++;				}				else				{					c.setWords(no+"."+SFileContent[ctr],ITEM_TYPE);					display += no + ".WRONG!";				}				no++;				ctr++;				display+="\n";				total_points+=Integer.parseInt(points.getText());			}			if(_points!=0)_points-=Integer.parseInt(points.getText());			total_points-=Integer.parseInt(points.getText());			esItemCorrect.setText(""+_points);			esItemPoints.setText(""+total_points);			if(_points!=0)_points-=Integer.parseInt(points.getText());			total_points-=Integer.parseInt(points.getText());		}				c.ctr = 0;		c.checkGUI();		c.f.addWindowListener(new WindowListener(){			public void windowOpened(WindowEvent e){}			public void windowClosing(WindowEvent e){}			public void windowDeactivated(WindowEvent e){}			public void windowIconified(WindowEvent e){}			public void windowDeiconified(WindowEvent e){}			public void windowActivated(WindowEvent e){}			public void windowClosed(WindowEvent e)			{				int points = Integer.parseInt(idItemCorrect.getText()) + c.idCORRECT_POINTS;				idItemCorrect.setText(""+points);				System.out.println(""+c.idCORRECT_POINTS);						points = Integer.parseInt(mcItemCorrect.getText()) + c.mcCORRECT_POINTS;				mcItemCorrect.setText(""+points);						points = Integer.parseInt(enItemCorrect.getText()) + c.enCORRECT_POINTS;				enItemCorrect.setText(""+points);						points = Integer.parseInt(esItemCorrect.getText()) + c.esCORRECT_POINTS;				esItemCorrect.setText(""+points);			}		});								totalscore = Integer.parseInt(""+idItemCorrect.getText()) + Integer.parseInt(""+mcItemCorrect.getText()) + Integer.parseInt(""+esItemCorrect.getText()) + Integer.parseInt(""+enItemCorrect.getText());		if(!((totalscore-4) <= 0))totalscore-=4;		int overalltotal = (Integer.parseInt(idItemPoints.getText())-1) + (Integer.parseInt(mcItemPoints.getText())-1) + (Integer.parseInt(enItemPoints.getText())-1) + (Integer.parseInt(esItemPoints.getText())-1);		scoreLbl.setText(totalscore + "/" + overalltotal);		statusArea.setText(display);	}	public static void main(String args[])	{		AnswerCreator ac = new AnswerCreator();		ac.launchFrame();	}}