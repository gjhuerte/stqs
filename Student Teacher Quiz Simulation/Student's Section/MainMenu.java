import java.awt.*;import java.awt.event.*;import javax.swing.*;import java.io.BufferedReader;import java.io.FileReader;import java.io.BufferedWriter;import java.io.FileWriter;import java.io.File;import javax.swing.border.*;import javax.swing.filechooser.FileFilter;import javax.swing.JFileChooser;public class MainMenu implements ActionListener,MouseListener,KeyListener,ItemListener{	int TO_CHECK = 0;	int TO_CHECK1 = 0;	int TO_CHECK2 = 0;	int OPENED_FILE = 0;	write w = new write();	String FileContent[] = {};		protected String arrayStringText[] = {};	int idItemNo = 0;	int mcItemNo = 0;	int enItemNo = 0;	int esItemNo = 0;		int idNo = 0;	int mcNo = 0;	int enNo = 0;	int esNo = 0;		int total = 0;	int fileWritten = 0;	int fileEnd = 0;	String filename = "";	public String END_OF_ITEMS = "- - END OF ITEMS - -";	public String NEWLINE = "\n";		String display = "";		JFrame f = new JFrame("Students Section");	Container contentpane;		JMenuBar mb = new JMenuBar();	JMenu menu = new JMenu("Menu");		JMenuItem openMenuItem = new JMenuItem("Open a testpaper");	JMenuItem changeUserDetails = new JMenuItem("Change Information");	JMenuItem exitMenuItem = new JMenuItem("Quit");		JMenu help = new JMenu("Help");		JMenuItem versionHelp = new JMenuItem("Version");	JMenuItem instruction = new JMenuItem("Instructions");	JMenuItem author = new JMenuItem("Author");		JPanel panel = new JPanel(new GridLayout(1,2));	JPanel rightPanel = new JPanel(new BorderLayout());	JPanel rightBttmPanel = new JPanel(new CardLayout());	JPanel leftPanel = new JPanel(new BorderLayout(1,1));		JPanel viewContainer = new JPanel(new FlowLayout());	String son = "No questionnaire opened";JScrollPane scrollPane;	JLabel s = new JLabel(son);	JTextArea area = new JTextArea(40,40);			JPanel answerSheetPanel = new JPanel(new BorderLayout(5,3));		JPanel itemPanel = new JPanel(new GridLayout(4,2,5,3));	JComboBox cb = new JComboBox(new String[]{"IDENTIFICATION","MULTIPLE CHOICE","ENUMERATION","ESSAY WRITING"});	JPanel viewAndCommentPanel = new JPanel(new GridLayout(1,2));	JButton viewAns = new JButton("<< VIEW >>");	JButton commentAdd = new JButton("Add Comment");	JLabel itemNo = new JLabel("1");	JTextField itemField = new JTextField();	JButton Prev = new JButton("<< Previous Item");	JButton Next = new JButton("Next >>");	JButton submitBttn = new JButton("Submit");	JTextField nameField = new JTextField();		JTextArea ansArea = new JTextArea(30,43);	JScrollPane ansBar = new JScrollPane(ansArea);		JPanel ansAreaBttn = new JPanel(new GridLayout(1,2,5,7));	JButton clearBttn = new JButton("Clear Field");	JButton saveBttn = new JButton("Save");			JFrame commentFrame = new JFrame("Comments");	JMenuBar commentBar = new JMenuBar();	JMenu commentMenu = new JMenu("Menu");	JMenuItem commentNew = new JMenuItem("New");	JMenuItem commentExit = new JMenuItem("Exit");		JTextArea COMMENT = new JTextArea(50,50);	JScrollPane cpane = new JScrollPane(COMMENT);		JPanel commentPanel = new JPanel();	JTextArea commentarea = new JTextArea(7,42);	JScrollPane commentsp = new JScrollPane(commentarea);		public void launchFrame()	{		openMethod();		f.setJMenuBar(mb);		mb.add(menu);			menu.add(openMenuItem);			menu.add(changeUserDetails);			menu.add(exitMenuItem);				openMenuItem.addActionListener(this);				changeUserDetails.addActionListener(this);				exitMenuItem.addActionListener(this);		mb.add(help);			help.add(versionHelp);versionHelp.addActionListener(this);			help.add(instruction);instruction.addActionListener(this);			help.add(author);author.addActionListener(this);		contentpane = f.getContentPane();				contentpane.add(panel);						viewContainer.setBorder(BorderFactory.createTitledBorder(null, "Testpaper",TitledBorder.TOP,TitledBorder.CENTER));		scrollPane = new JScrollPane(area);		viewContainer.add(s,BorderLayout.NORTH);area.setBorder(BorderFactory.createEtchedBorder());		viewContainer.add(scrollPane,BorderLayout.CENTER);		area.setEditable(false);		leftPanel.add(viewContainer,BorderLayout.CENTER);		panel.add(leftPanel);				itemPanel.add(cb);cb.addItemListener(this);		itemPanel.add(nameField);nameField.setBorder(BorderFactory.createTitledBorder(null, " Name:",TitledBorder.LEFT,TitledBorder.CENTER));		itemPanel.add(itemNo);itemNo.setBorder(BorderFactory.createTitledBorder(null, "Item No:",TitledBorder.LEFT,TitledBorder.CENTER));		itemPanel.add(itemField);itemField.setBorder(BorderFactory.createTitledBorder(null, "Answer:",TitledBorder.LEFT,TitledBorder.CENTER));itemField.addKeyListener(this);		itemPanel.add(Prev);Prev.addActionListener(this);		itemPanel.add(Next);Next.addActionListener(this);		itemPanel.add(submitBttn);submitBttn.addActionListener(this);				viewAndCommentPanel.add(viewAns);viewAns.addActionListener(this);		viewAndCommentPanel.add(commentAdd);commentAdd.addActionListener(this);				itemPanel.add(viewAndCommentPanel);				ansArea.setBorder(BorderFactory.createTitledBorder(null, "Answer View",TitledBorder.TOP,TitledBorder.CENTER));				ansAreaBttn.add(clearBttn);clearBttn.addActionListener(this);		ansAreaBttn.add(saveBttn);saveBttn.addActionListener(this);				answerSheetPanel.setBorder(BorderFactory.createTitledBorder(null, "Answer Sheet",TitledBorder.TOP,TitledBorder.CENTER));		answerSheetPanel.add(itemPanel,BorderLayout.NORTH);		answerSheetPanel.add(ansBar	,BorderLayout.WEST);		answerSheetPanel.add(ansAreaBttn,BorderLayout.SOUTH);				answerSheetPanel.setVisible(false);				Prev.setEnabled(false);		Next.setEnabled(false);					rightBttmPanel.add(answerSheetPanel);				commentarea.setEditable(false);		commentarea.setBorder(BorderFactory.createTitledBorder(null, "Comment",TitledBorder.TOP,TitledBorder.CENTER));		commentPanel.setBorder(BorderFactory.createEtchedBorder());				commentPanel.add(commentsp);		rightPanel.add(commentPanel,BorderLayout.NORTH);		rightPanel.add(rightBttmPanel,BorderLayout.CENTER);				panel.add(rightPanel);		f.setSize(1000,1000);		f.setIconImage(new ImageIcon("logo.png").getImage());		f.setSize(1000,1000);		f.setVisible(true);		f.setResizable(false);		f.setLocationRelativeTo(null);	}		public void itemStateChanged(ItemEvent e)	{		if(e.getSource() == cb)		{			itemNo.setText("1");			Next.setEnabled(true);		}			}		public void mousePressed(MouseEvent e){}	public void mouseClicked(MouseEvent e){}	public void mouseExited(MouseEvent e)	{		openMenuItem.setText("Opened testpaper"+filename);	}	public void mouseReleased(MouseEvent e){}	public void mouseEntered(MouseEvent e)	{		openMenuItem.setText("Change");	}		public void keyReleased(KeyEvent e){}	public void keyTyped(KeyEvent e){}	public void keyPressed(KeyEvent e)	{				if((e.getSource() == itemField)&&(e.getKeyCode() == 10))		{			submitMethod();			ansBar.getViewport().setViewPosition(new Point(0,0));		}			}				public void actionPerformed(ActionEvent e)	{		if( e.getSource() == openMenuItem )		{			if(OPENED_FILE == 1)resetAll();			openMethod();					}				if( e.getSource() == exitMenuItem )		{			f.dispose();		}				if( e.getSource() == Next )		{			NextMethod();		}				if( e.getSource() == Prev )		{			int number = Integer.parseInt(itemNo.getText());			if(number == 1)			{				JOptionPane.showMessageDialog(null,"You're already at the starting item!");				Prev.setEnabled(false);			}			else			{				number--;				itemNo.setText(""+number);			}			Next.setEnabled(true);		}				if( e.getSource() == viewAns )		{			viewAns.setText("<< Update View >>");			answerDisplay();			ansArea.setText(display);			display = "";		}				if( e.getSource() == clearBttn )		{			ansArea.setText("");		}				if( e.getSource() == submitBttn )		{			submitMethod();		}				if( e.getSource() == saveBttn )		{			if(nameField.getText().equals(""))			{				JOptionPane.showMessageDialog(null,"Dont forget to write your name!");			}			else				saveToFile();		}				if( e.getSource() == commentAdd )		{			commentMethod();			commentFrame.setVisible(true);		}				if(e.getSource() == commentNew)		{			COMMENT.setText("");		}				if(e.getSource() == commentExit)		{			commentFrame.setVisible(false);		}				if( e.getSource() == versionHelp )		{			version v = new version();			v.launchFrame();		}				if( e.getSource() == instruction )		{			InstructionReader i = new InstructionReader();			i.launchFrame();		}				if( e.getSource() == author )		{			AuthorReader a = new AuthorReader();			a.launchFrame();		}				if( e.getSource() == changeUserDetails )		{			AccountFrame af = new AccountFrame();			af.launchFrame();		}									ansBar.getViewport().setViewPosition(new Point(0,0));	}			public void openMethod()	{		openFile();	}		public void openFile()	{		File dir = new File(System.getProperty("user.home")+ "\\Documents\\STQS\\Questionnaire_Finished");		if(!dir.exists())		{			dir.mkdirs();		}					JFileChooser fileChooser = new JFileChooser();			fileChooser.setCurrentDirectory(dir);			FileFilter filter = new ExtensionFileFilter("Test Paper","etpr");			fileChooser.setFileFilter(filter);			fileChooser.setAcceptAllFileFilterUsed(false);			int result = fileChooser.showOpenDialog(null);						if (result == JFileChooser.APPROVE_OPTION) 			{				File selectedFile = fileChooser.getSelectedFile();				filename = selectedFile.getAbsolutePath();				viewAns.setText("<< View >>");				int SUCCESS_IN_READ = readFile();				if( SUCCESS_IN_READ == 1 )				{					openMenuItem.setText("Opened:"+filename);					s.setText(filename);					Next.setEnabled(true);					setDisplay();					openMenuItem.addMouseListener(this);					OPENED_FILE = 1;				}			}						if(result == JFileChooser.CANCEL_OPTION)				JOptionPane.showMessageDialog(null,"No file Chosen!","Status",JOptionPane.ERROR_MESSAGE);	}		public int readFile()	{		int ctr = 0;		int SUCCESS_IN_READ = 0;		String string = "";		try		{			EncryptData e = new EncryptData();			BufferedReader br = new BufferedReader(new FileReader(new File(filename)));			string = br.readLine();			String decrypted = e.decrypt(string);			string = br.readLine();			if(decrypted.equals(""))			{				SUCCESS_IN_READ = 1;				while((string = br.readLine())!= null) 				{					decrypted = e.decrypt(string);					FileContent[ctr] = decrypted;					ctr++;				}							}			else			{					String password_check = JOptionPane.showInputDialog("Enter password:");				if(decrypted.equals(password_check))				{					SUCCESS_IN_READ = 1;					while((string = br.readLine())!= null)  //if string == null , increment wont occur.					{						decrypted = e.decrypt(string);						FileContent[ctr] = decrypted;						ctr++;					}				}					else				{					JOptionPane.showMessageDialog(null,"Password Mismatch","Status",JOptionPane.ERROR_MESSAGE);				}							}			br.close();		}		catch(Exception e){}		return SUCCESS_IN_READ;			}		public void setDisplay()  //sets the display	{		display = "";		int no = 1;		int ctr = 0;				if(FileContent[ctr].equals("I. IDENTIFICATION"))		{			arrayStringText[total] = FileContent[ctr];			display += FileContent[ctr] + NEWLINE;ctr++;total++;			display += FileContent[ctr] + NEWLINE;ctr++;			while(!FileContent[ctr].equals(END_OF_ITEMS))			{				if(FileContent[ctr].equals(""))				{					display += no +"."+ "_________";;					display += NEWLINE;				}				else				if(FileContent[ctr].equals(END_OF_ITEMS))				{					display += FileContent[ctr];					display += NEWLINE;					break;				}				else				{					display += FileContent[ctr];					display += NEWLINE;					display += no +"."+ "_________";					display += NEWLINE;				}				no++;				ctr++;			}			ctr++;			total += no;			idItemNo = no;			no = 1;								display += NEWLINE;					display += NEWLINE;		}		else		{			cb.removeItemAt(0);			idItemNo-=1;		}							if(FileContent[ctr].equals("II. MULTIPLE CHOICE"))		{			mcNo = ctr;			int nmbr = 0;						arrayStringText[total+1] = FileContent[ctr];			display += FileContent[ctr] + NEWLINE;ctr++;total++;			display += FileContent[ctr] + NEWLINE;ctr++;						while(!FileContent[ctr].equals(END_OF_ITEMS))			{					if(FileContent[ctr].equals(END_OF_ITEMS))				{					display += FileContent[ctr];					display += NEWLINE;					break;				}				else				{					display += no +"."+ FileContent[ctr] + "______________";					display += NEWLINE;					ctr++;					nmbr = w.extractNumber(FileContent[ctr]);					String temp[] = FileContent[ctr].split(",");					char choice_letter = 'a';					for( int y = 1 ; y <= nmbr ; y++ )					{						display +=  choice_letter + "." + temp[y];						display += NEWLINE;						choice_letter++;					}					no++;				}				ctr++;			}			ctr++;			total += no;			mcItemNo = no;			no = 1;				display += NEWLINE;			display += NEWLINE;		}		else		{			mcItemNo-=1;			cb.removeItemAt(1);		}				if(FileContent[ctr].equals("III. ENUMERATION"))		{			enNo = ctr;			arrayStringText[total+1] = FileContent[ctr];			display += FileContent[ctr] + NEWLINE;ctr++;total++;			display += FileContent[ctr] + NEWLINE;ctr++;						while(!FileContent[ctr].equals(END_OF_ITEMS))			{				if(FileContent[ctr].equals(END_OF_ITEMS))				{					display += FileContent[ctr];					display += NEWLINE;					break;				}				else				{					if(FileContent[ctr].equals(""))					{						display += no +".";						display += NEWLINE;					}					else					{						display += FileContent[ctr];						display += NEWLINE;						display += no +".";						display += NEWLINE;					}					no++;				}				ctr++;							}			ctr++;			total += no;			enItemNo = no;			no = 1;					display += NEWLINE;			display += NEWLINE;		}		else		{			cb.removeItemAt(2);			enItemNo-=1;		}					if(FileContent[ctr].equals("IV. ESSAY WRITING"))		{			esNo = ctr;			arrayStringText[total+1] = FileContent[ctr];			display += FileContent[ctr] + NEWLINE;ctr++;total++;			display += FileContent[ctr] + NEWLINE;ctr++;						while(!FileContent[ctr].equals(END_OF_ITEMS))			{				if(FileContent[ctr].equals(END_OF_ITEMS))				{					display += FileContent[ctr];					display += NEWLINE;					break;				}				else				{					if(FileContent[ctr].equals(""))					{						FileContent[ctr] = "-";						display += FileContent[ctr];						display += NEWLINE;					}					else					{						display += no +"."+ FileContent[ctr] + "______________";						display += NEWLINE;					}					no++;				}				ctr++;			}			commentarea.setText(FileContent[ctr+3]);			total += no;			esItemNo = no;		}		else		{			cb.removeItemAt(3);			esItemNo-=1;		}					area.setText(display);	}	public void answerDisplay()	{		ansArea.setText("");		display = "";		int no = 1;		int ctr = 0;		if(FileContent[idNo].equals("I. IDENTIFICATION"))		{			display += FileContent[idNo]+NEWLINE;ctr++;			while(no<idItemNo)			{				if(arrayStringText[ctr].equals(""))				{					display += no +"."+ "_________";;					display += NEWLINE;				}				else				{					display += no +"."+arrayStringText[ctr];					display += NEWLINE;				}				no++;				ctr++;			}			no = 1;			display += arrayStringText[ctr] + NEWLINE;ctr++;		}				if(FileContent[mcNo].equals("II. MULTIPLE CHOICE"))		{			display += FileContent[mcNo]+NEWLINE;			ctr++;ctr++;			while(no<mcItemNo)			{				if(arrayStringText[ctr].equals(""))				{					display += no +"."+ "_________";;					display += NEWLINE;				}				else				{					display += no +"."+arrayStringText[ctr];					display += NEWLINE;				}				no++;				ctr++;			}			no = 1;			display += arrayStringText[ctr] + NEWLINE;ctr++;		}				if(FileContent[enNo].equals("III. ENUMERATION"))				{			display += FileContent[enNo]+NEWLINE;			ctr++;			while(no<enItemNo)			{				if(arrayStringText[ctr].equals(""))				{					display += no +"."+ "_________";;					display += NEWLINE;				}				else				{					display += no +"."+arrayStringText[ctr];					display += NEWLINE;				}				no++;				ctr++;			}			no = 1;			display += arrayStringText[ctr] + NEWLINE;ctr++;		}					if(FileContent[esNo].equals("IV. ESSAY WRITING"))		{			display += FileContent[esNo]+NEWLINE;			ctr++;			while(no<esItemNo)			{				if(arrayStringText[ctr].equals(""))				{					display += no +"."+ "_________";;					display += NEWLINE;				}				else				{					display += no +"."+arrayStringText[ctr];					display += NEWLINE;				}				no++;				ctr++;			}		}		ansArea.setText(display);	}			public void NextMethod()	{		int number = Integer.parseInt(itemNo.getText());			String typeOfExam = "";			typeOfExam += cb.getSelectedItem();			number++;			if(typeOfExam.equals("IDENTIFICATION"))				if(number == idItemNo)				{					JOptionPane.showMessageDialog(null,"You're already at the end of the specified number of items");					Next.setEnabled(false);				}				else					itemNo.setText(""+number);			if(typeOfExam.equals("MULTIPLE CHOICE"))				if(number == mcItemNo)				{					JOptionPane.showMessageDialog(null,"You're already at the end of the specified number of items");					Next.setEnabled(false);				}				else					itemNo.setText(""+number);				if(typeOfExam.equals("ENUMERATION"))				if(number == enItemNo)				{					JOptionPane.showMessageDialog(null,"You're already at the end of the specified number of items");					Next.setEnabled(false);				}				else					itemNo.setText(""+number);			if(typeOfExam.equals("ESSAY WRITING"))				if(number == esItemNo)				{					JOptionPane.showMessageDialog(null,"You're already at the end of the specified number of items");					Next.setEnabled(false);				}				else					itemNo.setText(""+number);			Prev.setEnabled(true);	}		public void submitMethod()	{		int number = Integer.parseInt(itemNo.getText());			String typeOfExam = "";			typeOfExam += cb.getSelectedItem();			if(typeOfExam.equals("IDENTIFICATION"))			{				if(number < idItemNo)				{					arrayStringText[number] = itemField.getText();					Prev.setEnabled(true);					number++;				}				else				{					JOptionPane.showMessageDialog(null,"Number not anymore in range of specified number of items");				}								if(number == 1)					Prev.setEnabled(false);				if(number == idItemNo)					Next.setEnabled(false);			}			if(typeOfExam.equals("MULTIPLE CHOICE"))			{				if(number < mcItemNo)				{					arrayStringText[number+idItemNo+2] = itemField.getText();					Prev.setEnabled(true);					number++;				}				else				{					JOptionPane.showMessageDialog(null,"Number not anymore in range of specified number of items");				}								if(number == 1)					Prev.setEnabled(false);				if(number == mcItemNo)					Next.setEnabled(false);			}			if(typeOfExam.equals("ENUMERATION"))			{				if(number < enItemNo)				{					arrayStringText[number+idItemNo+mcItemNo+3] = itemField.getText();					Prev.setEnabled(true);					number++;				}				else				{					JOptionPane.showMessageDialog(null,"Number not anymore in range of specified number of items");				}							if(number == 1)					Prev.setEnabled(false);				if(number == enItemNo)					Next.setEnabled(false);			}			if(typeOfExam.equals("ESSAY WRITING"))			{				if(number < esItemNo)				{					arrayStringText[number+idItemNo+mcItemNo+enItemNo+4] = itemField.getText();					Prev.setEnabled(true);					number++;				}				else				{					JOptionPane.showMessageDialog(null,"Number not anymore in range of specified number of items");				}								if(number == 1)					Prev.setEnabled(false);				if(number == esItemNo)					Next.setEnabled(false);			}			answerDisplay();			itemNo.setText(""+number);			itemField.setText("");	}		public void saveToFile()	{		int request_to_proceed = JOptionPane.YES_OPTION;		File dir = new File(System.getProperty("user.home")+ "\\Documents\\STQS\\Answer_Sheet");		if(!dir.exists())		{			dir.mkdirs();		}		if(COMMENT.getText().equals(""))		{			request_to_proceed  =  JOptionPane.showConfirmDialog(null,"It seems that you didn't add a comment, do you still want to continue?","Save Prompt",JOptionPane.YES_NO_OPTION);		}				if( request_to_proceed == JOptionPane.YES_OPTION)		{			String filename = "";			int fileWritten = 0;			JFileChooser file = new JFileChooser();			file.setCurrentDirectory(dir);			FileFilter filter = new ExtensionFileFilter("Answer sheet","ans");			file.setFileFilter(filter);			file.setAcceptAllFileFilterUsed(true);			file.setCurrentDirectory(dir);			int result = file.showSaveDialog(f);						if (result == JFileChooser.APPROVE_OPTION) 			{				File selectedFile = file.getSelectedFile();				 filename = selectedFile.getAbsolutePath() + ".stans";			}						try				{						BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(new File(filename)));				bufferedWriter.append("NAME:");						bufferedWriter.newLine();					bufferedWriter.append(nameField.getText());						bufferedWriter.newLine();					bufferedWriter.append("--END OF NAME--");						bufferedWriter.newLine();								for(fileWritten=0 	;fileWritten<total;fileWritten++)				{					bufferedWriter.append(arrayStringText[fileWritten]);						bufferedWriter.newLine();				}					bufferedWriter.append(END_OF_ITEMS);					bufferedWriter.newLine();					bufferedWriter.append("COMMENT:");					bufferedWriter.newLine();					bufferedWriter.append("/*");					bufferedWriter.newLine();					bufferedWriter.append(COMMENT.getText());					bufferedWriter.newLine();					bufferedWriter.append("*/");					bufferedWriter.newLine();					bufferedWriter.append(END_OF_ITEMS);										bufferedWriter.newLine();										bufferedWriter.flush();						bufferedWriter.close();				JOptionPane.showMessageDialog(null,"Success!","Status",JOptionPane.INFORMATION_MESSAGE);			}					catch(Exception e)			{			 			}		}	}		public void resetAll()	{		display  = "";		ansArea.setText("");		area.setText("");		cb.removeAllItems();		cb.addItem("IDENTIFICATION");		cb.addItem("MULTIPLE CHOICE");		cb.addItem("ENUMERATION");		cb.addItem("ESSAY WRITING");		for(int x = 0;x<arrayStringText.length;x++)			arrayStringText[x] = "";		for(int x = 0;x<FileContent.length;x++)			FileContent[x] = "";		f.revalidate();		f.repaint();		idNo = 0;		mcNo = 0;		enNo = 0;		esNo = 0;		idItemNo = 0;		mcItemNo = 0;		enItemNo = 0;		esItemNo = 0;		total = 0;		fileWritten = 0;		fileEnd = 0;		commentarea.setText("");	}		public void commentMethod()	{		commentFrame.setJMenuBar(commentBar);		commentBar.add(commentMenu);		commentMenu.add(commentNew);commentNew.addActionListener(this);		commentMenu.add(commentExit);commentExit.addActionListener(this);		commentFrame.add(cpane);		commentFrame.setVisible(false);		commentFrame.setSize(300,300);		commentFrame.setResizable(false);	}		/*public static void main(String args[])	{		MainMenu ac = new MainMenu();		ac.launchFrame();	}*/}